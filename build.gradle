plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    flatDir {
        dirs "lib"
    }
    maven {
        name = "Fuzs Mod Resources"
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    }
    maven {
        name = "Ladysnake Libs"
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
    }
    maven {
        url = 'https://maven.parchmentmc.org'
    }
    maven {
        url = "https://api.modrinth.com/maven"
    }
    maven {
        url = "https://aperlambda.github.io/maven"
    }
    maven {
        name = "Ladysnake Libs"
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
    }
    maven {
        name = "JitPack"
        url = 'https://jitpack.io'
    }
    maven {
        url = 'https://maven.cafeteria.dev'
        content {
            includeGroup 'net.adriantodt.fabricmc'
        }
    }
    maven {
        url "https://maven.shedaniel.me/"
    }
    maven {
        url "https://maven.terraformersmc.com/"
    }
    maven { url "https://maven.terraformersmc.com/releases" }
    maven {
        url = uri("https://storage.googleapis.com/devan-maven/")
        // for 0.4.2 and older
        // url uri("https://raw.githubusercontent.com/Devan-Kerman/Devan-Repo/master/")
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    mavenCentral()
}

loom {
    accessWidenerPath = file("src/main/resources/retro64.accesswidener")
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings(
            loom.layered {
                officialMojangMappings()
                parchment("org.parchmentmc.data:parchment-1.18.2:$parchment_version@zip")
            })
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"

    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"

    modImplementation "com.jab125:controllable-0.1"
    include "com.jab125:controllable-0.1"

    modImplementation "net.minecraftforge:forgeconfigapiport-fabric:4.0.0"
    include "net.minecraftforge:forgeconfigapiport-fabric:4.0.0"

    modImplementation "net.devtech:arrp:0.6.2"
    include "net.devtech:arrp:0.6.2"

    modApi "com.jab125:thonkutil-base-1.13.1"
    include "com.jab125:thonkutil-base-1.13.1"

    modImplementation "com.github.Chocohead:Fabric-ASM:${project.fabric_asm_version}"
    include "com.github.Chocohead:Fabric-ASM:${project.fabric_asm_version}"

    modImplementation 'com.electronwill.night-config:core:3.6.5'
    include 'com.electronwill.night-config:core:3.6.5'
    modImplementation 'com.electronwill.night-config:toml:3.6.5'
    include 'com.electronwill.night-config:toml:3.6.5'

    modImplementation "com.terraformersmc:modmenu:4.0.0", {
        exclude module: "fabric-api"
    }

    modImplementation("com.github.virtuoel:pehkui:${project.pehkui_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    include("com.github.virtuoel:pehkui:${project.pehkui_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
